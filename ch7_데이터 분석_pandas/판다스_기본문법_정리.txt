✅ 1 ️⃣ Pandas Series 정의하기

Series: Pandas에서 1차원 배열(리스트와 유사) 한 데이터 구조로,
Index(인덱스)를 사용하여 데이터를 쉽게 접근할 수 있음.

📌 문법

import pandas as pd

series = pd.Series(data, index=labels)

📌 예제

import pandas as pd

data = [100, 200, 300, 400]
index_labels = ['A', 'B', 'C', 'D']
series = pd.Series(data, index=index_labels)
print(series)

출력 결과:

A    100
B    200
C    300
D    400
dtype: int64

📌 실무 활용

금융 데이터에서 특정 날짜별 주식 가격 저장

설문조사 데이터에서 특정 응답자의 답변 저장

✅ 2 ️⃣ DataFrame (2차원 배열)

DataFrame: 행과 열이 있는 2차원 데이터 구조로,
딕셔너리 또는 Numpy 배열을 활용하여 생성 가능

📌 문법

df = pd.DataFrame(data, index=row_labels, columns=column_labels)

📌 예제

data = {'이름': ['철수', '영희', '민수'],
        '나이': [24, 25, 23],
        '성별': ['남', '여', '남']}

df = pd.DataFrame(data)
print(df)

출력 결과:

   이름  나이 성별
0  철수  24  남
1  영희  25  여
2  민수  23  남

📌 실무 활용

판매 데이터에서 제품별 가격 및 수량 관리

고객 데이터 관리 (이름, 나이, 성별, 구매 내역 등)

✅ 3 ️⃣ DataFrame 인덱스 및 컬럼 설정

행 방향의 index 설정: index 매개변수 활용
열 방향의 컬럼 설정: columns 매개변수 활용

📌 문법

df.index = row_labels
df.columns = column_labels

📌 예제

df.index = ['ID1', 'ID2', 'ID3']
df.columns = ['이름', '나이', '성별']
print(df)

출력 결과:

       이름  나이 성별
ID1  철수  24  남
ID2  영희  25  여
ID3  민수  23  남

📌 실무 활용

고객 데이터를 고유 ID 기준으로 설정

제품 데이터에서 제품명 기준으로 데이터 정리

✅ 4 ️⃣ describe() 함수

데이터 요약 통계량 확인 (평균, 표준편차, 최소/최대값 등 자동 계산)

📌 문법

df.describe()

📌 예제

df = pd.DataFrame({
    '가격': [1000, 1500, 2000, 2500, 3000],
    '판매량': [10, 15, 20, 25, 30]
})

print(df.describe())

출력 결과:

                가격        판매량
count     5.000000   5.000000
mean   2000.000000  20.000000
std     790.569415   7.905694
min    1000.000000  10.000000
25%    1500.000000  15.000000
50%    2000.000000  20.000000
75%    2500.000000  25.000000
max    3000.000000  30.000000

📌 실무 활용

매출 분석을 위해 평균 판매량과 가격 확인

주식 데이터에서 가격 변동성 확인

✅ 5 ️⃣ DataFrame 특정 열 선택 및 조작

특정 열을 선택하거나 수정 가능

📌 문법

df['열이름'] = 값
df['열이름'] += 100  # 값 변경

📌 예제

df['판매량'] = df['판매량'] * 2  # 판매량 2배 증가
print(df)

출력 결과:

      가격  판매량
0  1000   20
1  1500   30
2  2000   40
3  2500   50
4  3000   60

📌 실무 활용

제품 가격 조정

급여 계산 (세금 적용 후 순수익 산출)

✅ 6️ ⃣ DataFrame 새로운 열 추가

연산 결과를 새로운 열로 추가 가능

📌 문법

df['새로운열'] = 값

📌 예제

df['총액'] = df['가격'] * df['판매량']
print(df)

출력 결과:

      가격  판매량     총액
0  1000   20  20000
1  1500   30  45000
2  2000   40  80000
3  2500   50  125000
4  3000   60  180000

📌 실무 활용

매출 데이터에서 총 매출액 추가

근무 시간 데이터에서 급여 계산

✅ 7 ️⃣ DataFrame 행 선택 및 조작

.loc[]: 라벨(이름)로 접근
.iloc[]: 인덱스 번호로 접근

📌 문법

df.loc['행이름']
df.iloc[행번호]

📌 예제

print(df.loc[1])  # 두 번째 행 데이터

출력 결과:

가격     1500
판매량    30
총액   45000
Name: 1, dtype: int64

📌 실무 활용

특정 고객 정보 조회

특정 날짜의 주식 데이터 조회

✅ 8️ ⃣ NaN 처리

결측값 대체

📌 문법

df.dropna()  # NaN 값 제거
df.fillna(0)  # NaN 값을 0으로 채우기

📌 예제

import pandas as pd

df = pd.DataFrame({
    '이름': ['철수', '영희', '민수', '지수'],
    '점수': [90, None, 85, 88]
})

print("원본 데이터:")
print(df)

# NaN 값을 0으로 채우기
df_filled = df.fillna(0)
print("\nNaN을 0으로 대체한 데이터:")
print(df_filled)

출력 결과:

원본 데이터:
   이름    점수
0  철수  90.0
1  영희   NaN
2  민수  85.0
3  지수  88.0

NaN을 0으로 대체한 데이터:
   이름   점수
0  철수  90.0
1  영희   0.0
2  민수  85.0
3  지수  88.0

📌 실무 활용

데이터 누락 처리

설문조사 데이터에서 미응답 값 채우기

✅ 9 ️⃣ 정렬

특정 열 기준 정렬

📌 문법

df.sort_values(by='열이름', ascending=True)

📌 예제

df = pd.DataFrame({
    '상품명': ['A', 'B', 'C', 'D'],
    '가격': [5000, 2000, 8000, 6000]
})

# 가격을 기준으로 오름차순 정렬
df_sorted = df.sort_values(by='가격', ascending=True)
print(df_sorted)

출력 결과:

  상품명    가격
1    B  2000
0    A  5000
3    D  6000
2    C  8000

📌 실무 활용

상품 평점 순위 매기기

판매량 기준으로 제품 정렬


✅ 🔟 그룹화(Groupby) 사용법

특정 열을 기준으로 데이터를 그룹화할 수 있습니다.

📌 문법

df.groupby('열이름').집계함수()
groupby('열이름') : 특정 열을 기준으로 그룹화
집계 함수 (sum(), mean(), count(), max(), min() 등) : 그룹별로 연산 수행

📌 예제

import pandas as pd

df = pd.DataFrame({
    '카테고리': ['과일', '과일', '음료', '음료', '과일'],
    '상품명': ['사과', '바나나', '콜라', '주스', '포도'],
    '가격': [3000, 2000, 1500, 2500, 4000]
})

# 카테고리별 가격 합계 계산
df_grouped = df.groupby('카테고리')['가격'].sum()
print(df_grouped)

📌 출력 결과

yaml

카테고리
과일    9000
음료    4000
Name: 가격, dtype: int64

📌 다중 집계 함수 사용 (agg)

df_grouped = df.groupby('카테고리')['가격'].agg(['sum', 'mean', 'max'])
print(df_grouped)

📌 출력 결과
yaml
         sum    mean  max
카테고리
과일     9000  3000.0  4000
음료     4000  2000.0  2500

📌 그룹별 개수 세기

df_grouped = df.groupby('카테고리')['상품명'].count()
print(df_grouped)

📌 출력 결과

yaml

카테고리
과일    3
음료    2
Name: 상품명, dtype: int64
이처럼 groupby()를 활용하면 데이터 분석을 쉽게 수행할 수 있습니다! 🚀



✅ 🔟-2 CSV 저장/읽기

데이터 파일 입출력

📌 문법

df.to_csv("파일이름.csv", index=False)
df = pd.read_csv("파일이름.csv")

📌 예제

df.to_csv("상품목록.csv", index=False)
print("CSV 파일로 저장 완료")

# CSV 파일 읽기
df_loaded = pd.read_csv("상품목록.csv")
print(df_loaded)

📌 실무 활용

보고서 생성

매출 데이터 저장 및 불러오기


✅ 정리

기능	설명	실무 활용
Series	1차원 데이터 구조	주식 가격, 설문조사 응답

DataFrame	2차원 데이터 구조	고객 정보, 매출 데이터

인덱스 설정	행, 열 인덱스 설정	사용자 ID 기반 데이터 관리

describe()	데이터 요약 통계	평균 매출, 가격 변동 분석

열 선택 및 수정	특정 열 데이터 조작	급여 계산, 가격 조정

새로운 열 추가	연산 결과 추가	매출 총액 계산

NaN 처리	결측값 대체	데이터 누락 처리

정렬	특정 열 기준 정렬	상품 평점 순위 매기기

필터링	특정 조건 행 선택	고매출 상품 조회

CSV 저장/읽기	데이터 파일 입출력	보고서 생성

🔹 Pandas를 활용하면 데이터 분석 및 처리를
효율적으로 할 수 있습니다! 🚀