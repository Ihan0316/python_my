1 리스트 컴프리헨션,
2 enumerate(),
3 zip(),
4 람다 함수,
5 가변인수,
6 키워드 가변인수,
7 별표 언패킹 기능)


1
1️⃣ 리스트 컴프리헨션 (List Comprehension)

✅ 개념 및 정의
리스트 컴프리헨션(List Comprehension)은
한 줄의 코드로 리스트를 생성하는 문법입니다.

기존 for 루프를 사용하는 방식보다 더 간결하고
빠른 코드 작성이 가능합니다.

📌 예제



# 기존 for문 방식
squares = []
for x in range(1, 6):
    squares.append(x**2)

print(squares)  # [1, 4, 9, 16, 25]

# 리스트 컴프리헨션 방식
squares = [x**2 for x in range(1, 6)]
print(squares)  # [1, 4, 9, 16, 25]


2

2️⃣ enumerate()
✅ 개념 및 정의
enumerate()는 리스트나 튜플과 같은 반복 가능한 객체를 순회할 때,
인덱스와 값을 동시에 가져올 수 있는 함수입니다.

📌 예제


fruits = ["사과", "바나나", "체리"]

for index, fruit in enumerate(fruits):
    print(f"인덱스 {index}: {fruit}")

# 출력 결과:
# 인덱스 0: 사과
# 인덱스 1: 바나나
# 인덱스 2: 체리


3

3️⃣ zip()
✅ 개념 및 정의
zip() 함수는 두 개 이상의 리스트를 하나로
묶어서 튜플의 형태로 반환하는 함수입니다.

📌 예제


names = ["철수", "영희", "민수"]
scores = [85, 90, 78]

for name, score in zip(names, scores):
    print(f"{name}의 점수: {score}")

# 출력 결과:
# 철수의 점수: 85
# 영희의 점수: 90
# 민수의 점수: 78


4

4️⃣ 람다 함수 (Lambda Function)
✅ 개념 및 정의
람다 함수는 이름 없이 사용할 수 있는 익명 함수입니다.
일반적인 함수보다 간결하게 한 줄로 작성할 수 있습니다.

📌 예제


# 일반 함수
def add(a, b):
    return a + b

print(add(3, 5))  # 8

# 람다 함수
add_lambda = lambda a, b: a + b
print(add_lambda(3, 5))  # 8


5


5️⃣ 가변인수 (*args)


✅ 개념 및 정의
*args는 여러 개의 인수를 받을 수 있는 기능으로, 튜플 형태로 인수를 받습니다.

📌 예제


def sum_numbers(*args):
    return sum(args)

print(sum_numbers(1, 2, 3))         # 6
print(sum_numbers(10, 20, 30, 40))  # 100
print(sum_numbers())                # 0

6

6️⃣ 키워드 가변인수 (**kwargs)
✅ 개념 및 정의
**kwargs는 키워드 인수를 여러 개 받을 수 있는 기능으로, 딕셔너리 형태로 저장됩니다.

📌 예제


def print_user_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_user_info(name="철수", age=25, city="서울")
print_user_info(name="영희", hobby="독서", job="개발자")

# 출력 결과:
# name: 철수
# age: 25
# city: 서울

# name: 영희
# hobby: 독서
# job: 개발자


7

7️⃣ 별표 (*) 언패킹 기능
✅ 개념 및 정의
별표(*)를 사용하면 리스트나 튜플의 요소를 개별적으로 분해(언패킹)할 수 있습니다.

📌 예제


list1 = [1, 2, 3]
list2 = [4, 5, 6]

# 리스트 합치기
merged_list = [*list1, *list2]
print(merged_list)  # [1, 2, 3, 4, 5, 6]

# 함수의 인자로 리스트 전달
def add(a, b, c):
    return a + b + c

numbers = [3, 4, 5]
print(add(*numbers))  # 12

✅ 정리
기능	설명	예제
리스트 컴프리헨션	리스트를 한 줄의 코드로 생성하는 문법	[x**2 for x in range(1, 6)]

enumerate()	리스트에서 인덱스와 값을 동시에 가져오는 함수
for index, value in enumerate(lst):

zip()	여러 개의 리스트를 하나로 묶어주는 함수
for a, b in zip(list1, list2):

람다 함수	한 줄로 작성하는 익명 함수	lambda x, y: x + y

가변인수 (*args)	여러 개의 위치 인수를 받을 수 있음
def func(*args):

키워드 가변인수 (**kwargs)	여러 개의 키워드 인수를 받을 수 있음
	def func(**kwargs):

별표 언패킹 (*)	리스트/튜플을 개별 요소로 분해	print(*[1, 2, 3])
이제 위 기능들을 활용하여 다양한 문제를 해결할 수 있습니다! 🚀











